
---------------------------------------------
PonyDocs 1.0 Alpha 2 - Mar 13, 2011
---------------------------------------------

Open Source documentation based on MediaWiki

For any assistance:

	Taylor Dondich
	tdondich@splunk.com

Splunk > Open Source FTW!


---------------------------------------------
Requirements
---------------------------------------------
1. You're a sysadmin
2. You have a MediaWiki system at the ready
3. You can update apache's conf files for the media wiki ghost
4. You can run SQL commands on the MediaWiki DB
5. You know this is Alpha ;)
6. You promise to read AND follow all these steps IN ORDER
7. You've made a backup of your mediawiki DB in case you didn't meet the previous requirement

---------------------------------------------
Quick Install Instructions
---------------------------------------------

Notes: Please complete all install instructions before attempting to use your new PonyDocs installation.  Failure to do so will result in frustration and keyboard tossing.

------- 1) Configuring Apache ------- 

Modify your apache configuration for the use of friendly urls.  Modify your host to enable rewrite rules.  The following is an example of the apache configuration, if mediawiki was installed at the base of your html directory.  If your mediawiki instance resides in a sub-directory, modify the configuration accordingly.

	==== START SAMPLE APACHE CONFIGURATION ====
	RewriteEngine On
	# Main passthrus
	RewriteRule ^/api.php$ 		/api.php 	[L,QSA]
	RewriteRule ^/config/(.*)$ 	/config/$1 	[L,QSA]
	RewriteRule ^/skins/(.*)$	/skins/$1 	[L,QSA]
	RewriteRule ^/extensions/(.*)$ 	/extensions/$1	[L,QSA]

	# Rewrite rule to handle passing ugly doc urls to pretty urls
	RewriteRule ^/Documentation:(.*):(.*):(.*):(.*) /Documentation/$1/$4/$2/$3 [L,QSA,R=301]
	RewriteRule ^/Documentation:(.*):(.*):(.*) /Documentation/$1/latest/$2/$3 [L,QSA,R=301]

	# get home page requests to Main_Page
	RewriteRule ^/(\/*)$ /index.php?title=Main_Page [PT]
	# all other requests go to specific page
	RewriteRule ^/(\/*)(.*)$ /index.php?title=$3 [PT,QSA]
	==== END SAMPLE APACHE CONFIGURATION ====

Restart Apache at this time so Rewrite Rules will take affect.

------- 2) Modify LocalSettings.php ------- 

Modify your LocalSettings.php file to have an additional namespace of Documentation.  

Alpha Note: Currently, the namespace for PonyDocs is Documentation.  We will be writing in support to change this Namespace name, but for now, keep it Documentation.  You can change the index (100) of the Documentation namespace, as that customization is currently supported.

Example:

	$wgExtraNamespaces[100] = "Documentation";

There are additional user permission flags that are defined.  These are branchtopic, branchmanual, inherit, viewall.  Modify your $wgGroupPermissions to add these permissions to your existing groups.  You can also create new groups for your permissions.  Review http://www.mediawiki.org/wiki/Manual:User_rights for more information.  

An example in your LocalSettings.php file would be:

	$wgGroupPermissions['docteam']['branchtopic']	 = true; // Custom permission to branch a single topic.
	$wgGroupPermissions['docteam']['branchmanual']	 = true; // Custom permission to branch an entire manual.
	$wgGroupPermissions['docteam']['inherit']	 = true; // Custom permission to inherit a topic.
	$wgGroupPermissions['docteam']['viewall']	 = true; // Custom permission to handle View All link for topics.

Some mediawiki instances do not have $wgArticlePath property defined.  Please make sure this is defined in your LocalSettings.php.  Refer to: http://www.mediawiki.org/wiki/Manual:$wgArticlePath for more information.

Example, if mediawiki was installed at the root of your html directory:

	$wgArticlePath = '/$1';

-------  3) Install PonyDocs extension and Configure Mediawiki to Load it. ------- 

Move the extensions/PonyDocs directory into your Mediawiki's extensions directory.

Modify the PonyDocs.config.php file in the PonyDocs extension directory to fit your environment.

Update your mediawiki database schema by running the schema.sql file in the sql directory of the PonyDocs extension directory.

Finally, update your LocalSettings.php to load the extension. Add the following line to the bottom of your LocalSettings.php in your Mediawiki root directory.

	include_once($IP . "/extensions/PonyDocs/PonyDocsExtension.php");

There is a PonyDocs skin that is provided in this archive.  In order to see additional Documentation features, you should use this skin by moving the contents of the skin/ directory (two files and one directory) to  MEDIAWIKIBASE/skins/.  Customize this skin to fit your environment. To activate the skin, update the wgDefaultSkin value in LocalSettings.php:

	$wgDefaultSkin = 'ponydocs';

-------  4) Add your administrator user to appropriate user groups. ------- 

Visit your Mediawiki's Special:UserRights page and modify your administrator user to be added to the user group defined by PONYDOCS_AUTHOR_GROUP in your PonyDocs.config.php. 

------- 5) Create your first product version. ------- 

Login as your administrator user and visit the Documentation:Versions page.  If Mediawiki was installed at the base of your documentation root, then simply go to /Documentation:Versions .  You'll need to Create this page.

The Documentation:Versions page contains a listing of all versions of your product, as well as the status of that version.  The status can be 'released', 'unreleased' and 'preview'.  For regular users, only 'released' can be seen.  For documentation teams, all version can be seen.  For Customer group, the 'preview' versions can also be seen.  Each line in Documentation:Versions must follow the syntax of {{#version:name|status}} to define a version.  It uses this format:

	{{#version:VERSION|STATUS}} 

VERSION can be any alphanumeric string.  It should match your software's version.  STATUS is either "released" or "unreleased".  For example, to initialize version 1.0 of your product, have the following line in your Documentation:Versions page:

	{{#version:1.0|unreleased}}

Once saved, you'll be able to move to the next step, defining your first manual. As you add more versions of your product, add more lines to the Documentation:Versions page.

-------  6) Creating your first manual. ------- 

Now head to /Documentation:Manuals .  You'll need to create this page.

The Documentation:Manuals page defines the Manuals available for your versions.  A version can have all the manuals, or a sub-set of the manuals you define here.  You'll create the links of the manuals to your first version in the next step.  For now, you'll need to define the first manual.  Each line in Documentation:Manuals must follow the syntax of {{#manual:shortName|displayName}} where shortName is a nospaces short version name of the manual (For example, 'admin'), and the displayName can have spaces and is the full name of the Manual (For example, 'Administration').  The following lines creates two manuals called Installation and FAQ.

	{{#manual:Installation|Installation Manual}}
	{{#manual:FAQ|FAQ}} 

Once saved, you will see the listing of your manuals.  Each manual name will be a link to create the Table of Contents for your current version (in this case, the first version you created in Documentation:Versions).  By clicking on the Manual name, you'll proceed to the next step. (Alpha Bug: You may have to edit and save the Document:Manuals page in order to make the "Click manual to create TOC..." note go away after you've created the TOC).

------- 7) Creating your first Table of Contents and auto-generating your first Documentation topic. ------- 

Clicking on the Installation Manual link in Documentation:Manuals will have the system direct you to Documentation:InstallationTOC1.0 (If your manual name was Installation and your first version is 1.0).  TOC pages contain the Table of Contents of the manual for that version.  The TOC page consists of Section Names and the topics which reside under those sections.  Create the page, and put the following in the TOC page.

	Getting Started
	* {{#topic:Before You Begin}}
	* {{#topic:Next Steps}}
	Common problems
	* {{#topic:Disk Permissions}}
	* {{#topic:Database Errors}}

	[[Category:V:1.0]]

Note the use of the Category tag inside the TOC, which should autopopulated when the page was created. This will ensure the TOC is linked to version 1.0.  You must have this category tag present in order for the TOC to properly render for that version.

This will create a section called 'Getting Started', with your first topic being 'Before You Begin'

When you save the edit to your first TOC page, links to your new topics will automatically be created. (ALPHA BUG: You may have to save your edits to the TOC page twice).  Clicking on the topic in the TOC page will take you to the new topic, which you'll be able to edit with your new content.

Should get you started!  Have fun!

---------------------------------------------
F.A.Q.
---------------------------------------------

Q. Why do I get an error "Table 'ponydocs_doclinks' doesn't exist"?
A. You likely missed running the schema.sql file in step 3.

Q. Why can't I edit or create any docs pages?
A. Go back to step 4 and make sure your user in the in the docs group

Q. I've created all the pages, but the drop down for "product version" or "select manual" is empty.  Why?
A. Reset to the backup you made before starting and try again.  Though there are some corners you can paint yourself into, this system has been tested and should work if you follow the steps in order.

Q. I created my first TOC, but it is either empty or the there aren't links to click like step 7 says there will be.  What gives?
A. Edit and re-save the page and your content should be there and the links should be clickable. This is a known Alpha bug.

Q. I've created the TOC pages, so why do I still see the "Click manual to create TOC..." notice on the Document:Manuals page?
A. Save and edit this page and those should go away.  This is an known Alpha bug.
